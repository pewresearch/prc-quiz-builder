import*as e from"@wordpress/interactivity";var r={d:(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},o:(e,r)=>Object.prototype.hasOwnProperty.call(e,r)};const t=(u={getContext:()=>e.getContext,store:()=>e.store},n={},r.d(n,u),n),{apiFetch:o,url:{addQueryArgs:s}}=window.wp;var u,n;const{state:a,actions:c}=(0,t.store)("prc-quiz/controller",{state:{get communityGroupResultsUrl(){const e=(0,t.getContext)(),{groupId:r,quizUrl:o}=e;return!!r&&`${o}/group/${r}/results`},get groupAnswers(){const e=(0,t.getContext)(),{groupsEnabled:r,quizId:o}=e;if(!r)return;const s=a[`quiz_${o}`];if(!s)return;const{questions:u}=s;let n=Object.values(u).map((e=>Object.values(e.answers).map((e=>e.uuid))));return n=n.flat(),n.reduce(((e,r)=>(e[r]=0,e)),{})},get groupClusters(){const e=(0,t.getContext)(),{groupsEnabled:r,quizId:o}=e;if(!r)return;const s=a[`quiz_${o}`];if(!s)return;const{clusters:u}=s;return u}},actions:{createGroup:async e=>{const{nonce:r,quizId:u}=a,{groupAnswers:n,groupClusters:c}=a;console.log("createGroup Request::",{formFields:e,nonce:r,quizId:u,groupAnswers:n,groupClusters:c});const i=await(0,t.store)("prc-user-accounts/content-gate").actions.getUserIdFromCookie();if(console.log("createGroup Owner ID",i),!Object.keys(n).length||!Object.keys(c).length)throw new Error("Answers and clusters are required to create a group.");if(!i)throw new Error("Owner ID is required to create a group.");if(!u)throw new Error("Quiz ID is required to create a group.");try{return await async function(e,r,t,u,n,a){return new Promise(((c,i)=>{console.log("createGroupFormAction",{quizId:e,ownerId:r,formFields:t,answers:u,clusters:n,nonce:a});const g=t.find((e=>"groupName"===e.name))?.value;return a?g?r?Object.keys(u).length&&Object.keys(n).length?(console.log("createGroupFormAction do api fetch"),void o({path:s("prc-api/v3/quiz/create-group",{nonce:a,quizId:e}),method:"POST",data:{groupName:g,ownerId:r,answers:u,clusters:n}}).then((e=>(console.log("Group created successfully",e),c({message:`Group created successfully. You can now share this url: ${e.group_url} with your group members. For group: ${e.group_id}`,data:e,status:"success"})))).catch((e=>{let r="Error creating group. Please try again.";return"rest_invalid_param"===e.code&&(r="Invalid group name. Please check your group name and try again."),i({message:r,data:e,status:"error"})}))):i({message:"Answers and clusters are required to create a group.",status:"error"}):i({message:"Owner ID is required",status:"error"}):i({message:"Group name is required",status:"error"}):i({message:"Nonce is required",status:"error"})}))}(u,i,e,n,c,r)}catch(e){throw e}}},callbacks:{onGroupsInit:()=>{const e=(0,t.getContext)(),{groupsEnabled:r,groupData:o,groupDomain:s,groupId:u,quizId:n}=e;r&&a[`quiz_${n}`]}}});
//# sourceMappingURL=view.js.map