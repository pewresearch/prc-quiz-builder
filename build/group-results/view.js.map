{"version":3,"file":"group-results/view.js","mappings":"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","sources":["webpack://@prc/quiz-builder/webpack/bootstrap","webpack://@prc/quiz-builder/webpack/runtime/define property getters","webpack://@prc/quiz-builder/webpack/runtime/hasOwnProperty shorthand","webpack://@prc/quiz-builder/external module \"@wordpress/interactivity\"","webpack://@prc/quiz-builder/./src/group-results/create-group-form-action.js","webpack://@prc/quiz-builder/./src/group-results/view.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"getContext\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getContext), [\"store\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.store) });","/**\n * External Dependencies\n */\nconst {\n\tapiFetch,\n\turl: { addQueryArgs },\n} = window.wp;\n\nexport default async function createGroupFormAction(\n\tquizId,\n\townerId,\n\tformFields,\n\tanswers,\n\tclusters,\n\tnonce\n) {\n\t// We need to get the answers which is an initial array of answer uuids set to 0 this will be provided by the group results block available at state.groups.answers\n\t// We need to the clusters, which the group results block will add into state available at state.groups.clusters\n\treturn new Promise((resolve, reject) => {\n\t\tconsole.log('createGroupFormAction', {\n\t\t\tquizId,\n\t\t\townerId,\n\t\t\tformFields,\n\t\t\tanswers,\n\t\t\tclusters,\n\t\t\tnonce,\n\t\t});\n\t\t// Find the group name from the form fields.\n\t\tconst groupName = formFields.find(\n\t\t\t(field) => field.name === 'groupName'\n\t\t)?.value;\n\t\tif (!nonce) {\n\t\t\treturn reject({\n\t\t\t\tmessage: 'Nonce is required',\n\t\t\t\tstatus: 'error',\n\t\t\t});\n\t\t}\n\t\tif (!groupName) {\n\t\t\treturn reject({\n\t\t\t\tmessage: 'Group name is required',\n\t\t\t\tstatus: 'error',\n\t\t\t});\n\t\t}\n\t\tif (!ownerId) {\n\t\t\treturn reject({\n\t\t\t\tmessage: 'Owner ID is required',\n\t\t\t\tstatus: 'error',\n\t\t\t});\n\t\t}\n\t\tif (!Object.keys(answers).length || !Object.keys(clusters).length) {\n\t\t\treturn reject({\n\t\t\t\tmessage: 'Answers and clusters are required to create a group.',\n\t\t\t\tstatus: 'error',\n\t\t\t});\n\t\t}\n\t\tconsole.log('createGroupFormAction do api fetch');\n\t\t// Create the group.\n\t\tapiFetch({\n\t\t\tpath: addQueryArgs('prc-api/v3/quiz/create-group', {\n\t\t\t\tnonce: nonce,\n\t\t\t\tquizId: quizId,\n\t\t\t}),\n\t\t\tmethod: 'POST',\n\t\t\tdata: {\n\t\t\t\tgroupName,\n\t\t\t\townerId,\n\t\t\t\tanswers: answers,\n\t\t\t\tclusters: clusters,\n\t\t\t},\n\t\t})\n\t\t\t.then((group) => {\n\t\t\t\tconsole.log('Group created successfully', group);\n\t\t\t\treturn resolve({\n\t\t\t\t\tmessage: `Group created successfully. You can now share this url: ${group.group_url} with your group members. For group: ${group.group_id}`,\n\t\t\t\t\tdata: group,\n\t\t\t\t\tstatus: 'success',\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconst errorCode = error.code;\n\t\t\t\tlet errorMessage = 'Error creating group. Please try again.';\n\t\t\t\tif ('rest_invalid_param' === errorCode) {\n\t\t\t\t\terrorMessage =\n\t\t\t\t\t\t'Invalid group name. Please check your group name and try again.';\n\t\t\t\t}\n\t\t\t\treturn reject({\n\t\t\t\t\tmessage: errorMessage,\n\t\t\t\t\tdata: error,\n\t\t\t\t\tstatus: 'error',\n\t\t\t\t});\n\t\t\t});\n\t});\n}\n","/**\n * WordPress Dependencies\n */\nimport { store, getContext } from '@wordpress/interactivity';\n\n/**\n * Internal Dependencies\n */\nimport createGroupFormAction from './create-group-form-action';\n\nconst { state, actions } = store('prc-quiz/controller', {\n\tstate: {\n\t\tget communityGroupResultsUrl() {\n\t\t\tconst context = getContext();\n\t\t\tconst { groupId, quizUrl } = context;\n\t\t\tif (!groupId) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn `${quizUrl}/group/${groupId}/results`;\n\t\t},\n\t\tget groupAnswers() {\n\t\t\tconst context = getContext();\n\t\t\tconst { groupsEnabled, quizId } = context;\n\t\t\tif (!groupsEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst quizData = state[`quiz_${quizId}`];\n\t\t\tif (!quizData) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { questions } = quizData;\n\t\t\t// Loop through each question and get it's answer key\n\t\t\tlet answerKeys = Object.values(questions).map((question) => {\n\t\t\t\treturn Object.values(question.answers).map(\n\t\t\t\t\t(answer) => answer.uuid\n\t\t\t\t);\n\t\t\t});\n\t\t\t// Flatten the array of arrays into a single array.\n\t\t\tanswerKeys = answerKeys.flat();\n\t\t\t// Now map as an object the answerkeys with a value of 0\n\t\t\tconst answers = answerKeys.reduce((acc, key) => {\n\t\t\t\tacc[key] = 0;\n\t\t\t\treturn acc;\n\t\t\t}, {});\n\n\t\t\treturn answers;\n\t\t},\n\t\tget groupClusters() {\n\t\t\tconst context = getContext();\n\t\t\tconst { groupsEnabled, quizId } = context;\n\t\t\tif (!groupsEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst quizData = state[`quiz_${quizId}`];\n\t\t\tif (!quizData) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { clusters } = quizData;\n\t\t\treturn clusters;\n\t\t},\n\t},\n\tactions: {\n\t\t/**\n\t\t * Create a new group.\n\t\t * @param {Object} formFields - The form fields.\n\t\t * @returns {Promise<object>} - The create group response.\n\t\t */\n\t\tcreateGroup: async (formFields) => {\n\t\t\tconst { nonce, quizId } = state;\n\t\t\tconst { groupAnswers, groupClusters } = state;\n\t\t\tconsole.log('createGroup Request::', {\n\t\t\t\tformFields,\n\t\t\t\tnonce,\n\t\t\t\tquizId,\n\t\t\t\tgroupAnswers,\n\t\t\t\tgroupClusters,\n\t\t\t});\n\t\t\tconst ownerId = await store(\n\t\t\t\t'prc-user-accounts/content-gate'\n\t\t\t).actions.getUserIdFromCookie();\n\t\t\tconsole.log('createGroup Owner ID', ownerId);\n\t\t\tif (\n\t\t\t\t!Object.keys(groupAnswers).length ||\n\t\t\t\t!Object.keys(groupClusters).length\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Answers and clusters are required to create a group.'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!ownerId) {\n\t\t\t\tthrow new Error('Owner ID is required to create a group.');\n\t\t\t}\n\t\t\tif (!quizId) {\n\t\t\t\tthrow new Error('Quiz ID is required to create a group.');\n\t\t\t}\n\t\t\ttry {\n\t\t\t\treturn await createGroupFormAction(\n\t\t\t\t\tquizId,\n\t\t\t\t\townerId,\n\t\t\t\t\tformFields,\n\t\t\t\t\tgroupAnswers,\n\t\t\t\t\tgroupClusters,\n\t\t\t\t\tnonce\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t},\n\t},\n\tcallbacks: {\n\t\tonGroupsInit: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { groupsEnabled, groupData, groupDomain, groupId, quizId } =\n\t\t\t\tcontext;\n\t\t\tif (!groupsEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst quizData = state[`quiz_${quizId}`];\n\t\t\tif (!quizData) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// console.log('onGroupsInit::', {\n\t\t\t// \t...quizData,\n\t\t\t// \tgroupAnswers: state.groupAnswers,\n\t\t\t// \tgroupClusters: state.groupClusters,\n\t\t\t// });\n\t\t},\n\t},\n});\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__","x","d","apiFetch","url","addQueryArgs","window","wp","state","actions","store","communityGroupResultsUrl","context","getContext","groupId","quizUrl","groupAnswers","groupsEnabled","quizId","quizData","questions","answerKeys","values","map","question","answers","answer","uuid","flat","reduce","acc","groupClusters","clusters","createGroup","async","nonce","console","log","formFields","ownerId","getUserIdFromCookie","keys","length","Error","Promise","resolve","reject","groupName","find","field","name","value","path","method","data","then","group","message","group_url","group_id","status","catch","error","errorMessage","code","createGroupFormAction","callbacks","onGroupsInit","groupData","groupDomain"],"sourceRoot":""}